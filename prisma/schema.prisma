generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Categoria {
  BOLO_ANIVERSARIO
  BOLO_TACA
  BOLO_CASEIRO
  DOCINHOS
  SOBREMESAS
}

enum MassaBolo {
  RED_VELVET
  BRANCA
  CHOCOLATE
  CENOURA
  MILHO
  FUBA
  LIMAO
  FORMIGUEIRO
  LARANJA
  IOGURTE
}

enum FormaPagamento {
  DINHEIRO
  PIX
  CARTAO
}

enum StatusPedido {
  PENDENTE
  CONFIRMADO
  PRODUCAO
  ENTREGUE
  CANCELADO
}

enum TipoPedido {
  ENTREGA
  RETIRADA
}

// Produtos
model Produto {
  id          Int       @id @default(autoincrement())
  nome        String
  descricao   String?
  categoria   Categoria
  preco       Float?    
  ativo       Boolean   @default(true)
  imagem      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tamanhos    ProdutoTamanho[]
  recheios    ProdutoRecheio[]
  coberturas  ProdutoCobertura[]
  decoracoes  ProdutoDecoracao[]
  massas      ProdutoMassa[]
  itensCarrinho ItemCarrinho[]
  itensPedido  ItemPedido[]

  @@map("produtos")
}

// Tamanhos
model ProdutoTamanho {
  id        Int    @id @default(autoincrement())
  produtoId Int
  tamanho   String
  preco     Float
  fatias    Int?

  produto   Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  @@map("produto_tamanhos")
}

// Massas
model Massa {
  id        Int       @id @default(autoincrement())
  nome      String    @unique
  tipo      MassaBolo
  precoExtra Float    @default(0)
  ativo     Boolean   @default(true)
  produtoMassas ProdutoMassa[]
  @@map("massas")
}

model ProdutoMassa {
  id        Int @id @default(autoincrement())
  produtoId Int
  massaId   Int
  produto   Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  massa     Massa   @relation(fields: [massaId], references: [id], onDelete: Cascade)
  @@unique([produtoId, massaId])
  @@map("produto_massas")
}

// Recheios
model Recheio {
  id        Int     @id @default(autoincrement())
  nome      String  @unique
  ativo     Boolean @default(true)
  produtoRecheios ProdutoRecheio[]
  @@map("recheios")
}

model ProdutoRecheio {
  id        Int   @id @default(autoincrement())
  produtoId Int
  recheioId Int
  precoExtra Float @default(0)
  produto Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  recheio Recheio @relation(fields: [recheioId], references: [id], onDelete: Cascade)
  @@unique([produtoId, recheioId])
  @@map("produto_recheios")
}

// Coberturas
model Cobertura {
  id        Int     @id @default(autoincrement())
  nome      String  @unique
  ativo     Boolean @default(true)
  produtoCoberturas ProdutoCobertura[]
  @@map("coberturas")
}

model ProdutoCobertura {
  id          Int   @id @default(autoincrement())
  produtoId   Int
  coberturaId Int
  precoExtra  Float @default(0)
  produto   Produto   @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  cobertura Cobertura @relation(fields: [coberturaId], references: [id], onDelete: Cascade)
  @@unique([produtoId, coberturaId])
  @@map("produto_coberturas")
}

// Decorações
model Decoracao {
  id        Int    @id @default(autoincrement())
  nome      String @unique
  preco     Float
  ativo     Boolean @default(true)
  produtoDecoracoes ProdutoDecoracao[]
  @@map("decoracoes")
}

model ProdutoDecoracao {
  id          Int @id @default(autoincrement())
  produtoId   Int
  decoracaoId Int
  produto   Produto   @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  decoracao Decoracao @relation(fields: [decoracaoId], references: [id], onDelete: Cascade)
  @@unique([produtoId, decoracaoId])
  @@map("produto_decoracoes")
}

// Carrinho
model Carrinho {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  itens ItemCarrinho[]
  @@map("carrinhos")
}

model ItemCarrinho {
  id         Int    @id @default(autoincrement())
  carrinhoId String
  produtoId  Int
  quantidade Int    @default(1)
  tamanho    String? 
  preco      Float   
  massa      String?  
  recheios   String[] 
  cobertura  String?  
  decoracoes String[] 
  carrinho   Carrinho @relation(fields: [carrinhoId], references: [id], onDelete: Cascade)
  produto    Produto  @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  @@map("itens_carrinho")
}

// Pedidos
model Pedido {
  id            Int          @id @default(autoincrement())
  nomeCliente   String
  telefone      String
  endereco      String?
  tipoPedido    TipoPedido
  formaPagamento FormaPagamento
  valorTotal    Float
  status        StatusPedido @default(PENDENTE)
  observacoes   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  itens ItemPedido[]
  @@map("pedidos")
}

model ItemPedido {
  id         Int    @id @default(autoincrement())
  pedidoId   Int
  produtoId  Int
  quantidade Int
  preco      Float
  tamanho    String?
  massa      String?
  recheios   String[]
  cobertura  String?
  decoracoes String[]
  pedido     Pedido  @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  produto    Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  @@map("itens_pedido")
}
